/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GouvernanceContract
  extends Truffle.Contract<GouvernanceInstance> {
  "new"(
    _debondNFTTokenAddress: string,
    _owner: string,
    meta?: Truffle.TransactionDetails
  ): Promise<GouvernanceInstance>;
}

type AllEvents = never;

export interface GouvernanceInstance extends Truffle.ContractInstance {
  initialize: {
    (
      _dnft0: string,
      _dnft1: string,
      _dnft2: string,
      _dnft3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _dnft0: string,
      _dnft1: string,
      _dnft2: string,
      _dnft3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _dnft0: string,
      _dnft1: string,
      _dnft2: string,
      _dnft3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _dnft0: string,
      _dnft1: string,
      _dnft2: string,
      _dnft3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  compose: {
    (
      _to: string,
      ids: (number | BN | string)[],
      typeToBurn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _to: string,
      ids: (number | BN | string)[],
      typeToBurn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _to: string,
      ids: (number | BN | string)[],
      typeToBurn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _to: string,
      ids: (number | BN | string)[],
      typeToBurn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stake: {
    (
      ids: (number | BN | string)[],
      typeToStack: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ids: (number | BN | string)[],
      typeToStack: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      ids: (number | BN | string)[],
      typeToStack: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ids: (number | BN | string)[],
      typeToStack: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    initialize: {
      (
        _dnft0: string,
        _dnft1: string,
        _dnft2: string,
        _dnft3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _dnft0: string,
        _dnft1: string,
        _dnft2: string,
        _dnft3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _dnft0: string,
        _dnft1: string,
        _dnft2: string,
        _dnft3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _dnft0: string,
        _dnft1: string,
        _dnft2: string,
        _dnft3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    compose: {
      (
        _to: string,
        ids: (number | BN | string)[],
        typeToBurn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _to: string,
        ids: (number | BN | string)[],
        typeToBurn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _to: string,
        ids: (number | BN | string)[],
        typeToBurn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _to: string,
        ids: (number | BN | string)[],
        typeToBurn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    stake: {
      (
        ids: (number | BN | string)[],
        typeToStack: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ids: (number | BN | string)[],
        typeToStack: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        ids: (number | BN | string)[],
        typeToStack: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ids: (number | BN | string)[],
        typeToStack: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
